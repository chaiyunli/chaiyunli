一．基本概念
（1）什么是0-1背包问题
0-1背包问题是一类典型的组合优化问题，它要求找出n个物体的一个子集使其尽可能的装满容量为W的背包。他本质上是一个只有一个约束条件的0-1规划问题，在计算理论上属于NP完全问题，计算复杂性为o(2^n)。随着该问题的发展，产生了该问题的许多变形。例如：多选择背包问题；有界背包问题；无界背包问题；多约束背包问题等。
（2） 什么是多选择背包问题
多选择背包问题定义为有附加约束条件的背包问题，该问题带有互不相关的多选择约束。该问题的特点是只有一个承重有限的背包，将要放入背包的物品被分为相互排斥的若干类，而每类中有若干不同的项目。 
（3) 什么是多约束背包问题
多约束背包问题也称为多维背包问题或者多背包问题，它是带有一组约束（重量 尺寸 可靠性等）的背包问题。该问题可以简单描述为n个物品要放入m个称重不同的背包，他与0-1背包问题不同的是，物品放入不同背包的重量是不同的。显然，在多约束背包的问题中，除了确定每个物品是否被放入背包之外，还需要确定他需要放入哪个背包。
(4) 什么是多维多选择背包问题
多维多选择背包问题是一类特殊的0-1背包问题。问题的描述如下：存在m个背包，其称重分别是Wk（k=1，2，3…m）和n类物品，每类物品又分别有Ii（i=1,2,…n）个物品，其价值分别为Vij（j=1,2,…）而对每一个物品，由于其装入的背包不同而其重量也有所不同，分别为Wijk,该问题要求每一类只选择装入一个物品，在满足背包称重的限制下最大化装入背包的物品总价值。

二.多维背包问题解题思路
现有n个物品，每个物品有m个属性值，有一个背包，容积最大为V，有m个约束条件，对应背包m个约束条件，将这n个物品装入背包中，要求价值最大，并且叠加属性值不超过背包约束上限。使用动态规划来解决多维背包问题，使得得出的最大价值等于预期最大价值。输入数据第一行三个数分别为n：物品数量；m：约束条件；bestV：期望最大价值。第二行分别为n个物品的价值，接下n*m个数据分别为每个物品对每个约束的消耗。最后一行为每个约束的上限值。
示例如下期末算法代码所示。

三．递归方法调用
动态规划和分治的思想类似，其基本思想是将一个大的问题分解为若干个小的问题，先求解小的问题，再结合这些小问题的解得到大问题的解，即通过递归或者查表来得到最终解。
先讨论一维01背包问题中的动态规划：我们设定一个函数f：f（i，j）表示，将前i个物品（包含i），放入大小为j的背包中所获取的最大价值。转移方程为：f（i，j）=max[f（i-1，j），f（i-1，j-ri）+vi],其中，ri为第i个物品对约束的消耗，vi为第i个物品的价值。
当i=0时候，f（i，j）=0。
我们通过递归来求得初始值的f（n，V）。
当我们的约束条件拓展到m维时，只需将原式中的j看作一个向量J，J的自由度为m，那么递归方程变为f(i，J）=max[f（i-1，J），f（i-1，J-rij)+vi]。不需要做多余的处理，只需要将原来的一个一维向量j看作是一个m维向量J就可以了。在判断是否能装得下当前物品时，我们只需要判断当前物品i对m个约束的消耗向量任意维度是否小于当前J的任意维度，否则就装不下。

四．复杂度分析
动态规划通过最优子结构，将问题转换为子问题的求解。转换的过程中，涉及到某个具体的商品是否选择的问题。我们来分析一下动态规划的时间和空间复杂度：
（1）时间复杂度
动态规划的转移方程为：f(i，J）=max[f（i-1，J），f（i-1，J-rij)+vi]，J为约束向量，由于这里用到递归，递归次数最多为n^2,而形式上递归可以看作是二叉树的遍历，设每次遍历所需的时间复杂度为N，又由于这里的二叉树不是完全二叉树（因为有时放入物品不满足约束条件），所以情况复杂时，复杂度为O（n^2*N),而又因为这个二叉树始终有左子树，所以情况好时，复杂度总大于O(n*N)。
  计算N，每次遍历只需要先判断是否可以装得下当前物品，即只需要判断当前物品i对m个约束的消耗向量任意维度是否小于当前J的任意维度,其复杂度为：O(m),
所以，递归调用时间复杂度为O（nm）。
  另外，用traceBack来获取到底哪些物品装入了背包，时间复杂度也为O（n）。
（2）空间复杂度：
我们需要定义二叉树来存储traceBack数据，该二叉树情况复杂时，复杂度为O（n^2m),情况好时，复杂度总大于O(nm)。
